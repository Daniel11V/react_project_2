{"version":3,"sources":["store.js","components/Read.jsx","components/Write.jsx","App.js","reportWebVitals.js","index.js"],"names":["initialState","text","fullsize","createStore","state","action","type","newText","current_box","connect","dispatch","changeText","input","toogleRead","className","onClick","id","value","onChange","event","target","toogleWrite","marked","setOptions","breaks","dangerouslySetInnerHTML","__html","App","store","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gOAEMA,EAAe,CACjBC,KAAK,ypCA4CLC,SAAU,GA2BCC,eAxBK,WAAmC,IAAlCC,EAAiC,uDAAzBJ,EAAcK,EAAW,uCAClD,OAAQA,EAAOC,MACX,IAAK,cACD,OAAO,2BACAF,GADP,IAEIH,KAAMI,EAAOE,UAErB,IAAK,cACD,OAAKH,EAAMF,SAMA,2BACAE,GADP,IAEIF,SAAU,IAPP,2BACAE,GADP,IAEIF,SAAUG,EAAOG,cAQ7B,QACI,OAAOJ,M,OCrBJK,eApBS,SAAAL,GAAK,MAAK,CAC9BH,KAAMG,EAAMH,KACZC,SAAUE,EAAMF,aAGO,SAAAQ,GAAQ,MAAK,CACpCC,WADoC,SACzBC,GACPF,EAAS,CACLJ,KAAM,cACNC,QAASK,KAGjBC,WAPoC,WAQhCH,EAAS,CACLJ,KAAM,cACNE,YAAa,QAKVC,EA9CF,SAAC,GAA8C,IAA7CR,EAA4C,EAA5CA,KAAMC,EAAsC,EAAtCA,SAAUS,EAA4B,EAA5BA,WAAYE,EAAgB,EAAhBA,WACvC,OAAIX,GAAyB,IAAbA,EAoBR,wBAlBA,sBAAKY,UAAU,WAAf,UACI,mCACI,0CACA,sBACIA,UAAU,WACVC,QAASF,EAFb,oBAIJ,0BACAG,GAAG,SACHC,MAAOhB,EACPa,UAAyB,IAAbZ,EAAiB,YAAc,GAC3CgB,SAAU,SAACC,GAAD,OAAWR,EAAWQ,EAAMC,OAAOH,QAJ7C,SAKKhB,U,gBCyBNQ,eAdS,SAAAL,GAAK,MAAK,CAC9BH,KAAMG,EAAMH,KACZC,SAAUE,EAAMF,aAGO,SAAAQ,GAAQ,MAAK,CACpCW,YADoC,WAEhCX,EAAS,CACLJ,KAAM,cACNE,YAAa,QAKVC,EAvCD,SAAC,GAAmC,IAAlCR,EAAiC,EAAjCA,KAAMC,EAA2B,EAA3BA,SAAUmB,EAAiB,EAAjBA,YAK5B,OAJAC,IAAOC,WAAW,CACdC,QAAQ,IAGRtB,GAAyB,IAAbA,EAgBJ,wBAdJ,sBAAKY,UAAU,YAAf,UACI,mCACI,6CACA,sBACIA,UAAU,WACVC,QAASM,EAFb,oBAIJ,sBACIL,GAAG,UACHS,wBAAyB,CAACC,OAAQJ,IAAOrB,YCL9C0B,MATf,WACE,OACE,eAAC,IAAD,CAAUC,MAAOA,EAAjB,UACE,cAAC,EAAD,IACA,cAAC,EAAD,QCESC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.6f503351.chunk.js","sourcesContent":["import { createStore } from \"redux\"\r\n\r\nconst initialState = {\r\n    text: `# Welcome to my React Markdown Previewer!\r\n\r\n## This is a sub-heading...\r\n### And here's some other cool stuff:\r\n\r\nHeres some code, \\`<div></div>\\`, between 2 backticks.\r\n\r\n\\`\\`\\`\r\n// this is multi-line code:\r\n\r\nfunction anotherExample(firstLine, lastLine) {\r\n  if (firstLine == '\\`\\`\\`' && lastLine == '\\`\\`\\`') {\r\n    return multiLineCode;\r\n  }\r\n}\r\n\\`\\`\\`\r\n\r\nYou can also make text **bold**... whoa!\r\nOr _italic_.\r\nOr... wait for it... **_both!_**\r\nAnd feel free to go crazy ~~crossing stuff out~~.\r\n\r\nThere's also [links](https://www.freecodecamp.org), and\r\n> Block Quotes!\r\n\r\nAnd if you want to get really crazy, even tables:\r\n\r\nWild Header | Crazy Header | Another Header?\r\n------------ | ------------- | -------------\r\nYour content can | be here, and it | can be here....\r\nAnd here. | Okay. | I think we get it.\r\n\r\n- And of course there are lists.\r\n  - Some are bulleted.\r\n     - With different indentation levels.\r\n        - That look like this.\r\n\r\n\r\n1. And there are numbered lists too.\r\n1. Use just 1s if you want!\r\n1. And last but not least, let's not forget embedded images:\r\n\r\n![freeCodeCamp Logo](https://cdn.freecodecamp.org/testable-projects-fcc/images/fcc_secondary.svg)\r\n`,\r\n    fullsize: 0\r\n}\r\n\r\nconst reducerText = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case \"CHANGE_TEXT\":\r\n            return {\r\n                ...state,\r\n                text: action.newText\r\n            };\r\n        case \"CHANGE_SIZE\":\r\n            if (!state.fullsize) {\r\n                return {\r\n                    ...state,\r\n                    fullsize: action.current_box\r\n                };\r\n            } else {\r\n                return {\r\n                    ...state,\r\n                    fullsize: 0\r\n                };\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default createStore(reducerText);","import React from \"react\";\r\nimport { connect } from 'react-redux';\r\n\r\nconst Read = ({text, fullsize, changeText, toogleRead}) => {\r\n    if(!fullsize || fullsize === 1) {\r\n        return (\r\n            <div className=\"box read\">\r\n                <header>\r\n                    <span>Editor</span>\r\n                    <span \r\n                        className=\"fullsize\" \r\n                        onClick={toogleRead}>BIG</span>\r\n                </header>\r\n                <textarea \r\n                id=\"editor\"\r\n                value={text} \r\n                className={(fullsize === 1)? \"maximized\" : \"\"}\r\n                onChange={(event) => changeText(event.target.value)}>\r\n                    {text}\r\n                </textarea>\r\n            </div>\r\n        )\r\n    } else {\r\n        return (\r\n            <div></div>\r\n        )\r\n    }\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n    text: state.text,\r\n    fullsize: state.fullsize\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    changeText(input) {\r\n        dispatch({\r\n            type: \"CHANGE_TEXT\",\r\n            newText: input\r\n        })\r\n    },\r\n    toogleRead() {\r\n        dispatch({\r\n            type: \"CHANGE_SIZE\",\r\n            current_box: 1\r\n        })\r\n    }\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Read);","import React from \"react\";\r\nimport { connect } from 'react-redux';\r\nimport marked from \"marked\";\r\n\r\nconst Write = ({text, fullsize, toogleWrite}) => {\r\n    marked.setOptions({\r\n        breaks: true\r\n    });\r\n    \r\n    if(!fullsize || fullsize === 2) {\r\n        return (\r\n            <div className=\"box write\">\r\n                <header>\r\n                    <span>Previewer</span>\r\n                    <span \r\n                        className=\"fullsize\"\r\n                        onClick={toogleWrite}>BIG</span>\r\n                </header>\r\n                <span \r\n                    id=\"preview\" \r\n                    dangerouslySetInnerHTML={{__html: marked(text)}}>\r\n                </span>\r\n            </div>\r\n        );\r\n    } else {\r\n        return (<div></div>);\r\n    }\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n    text: state.text,\r\n    fullsize: state.fullsize\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    toogleWrite() {\r\n        dispatch({\r\n            type: \"CHANGE_SIZE\",\r\n            current_box: 2\r\n        })\r\n    }\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Write);","import './App.css';\nimport { Provider } from 'react-redux';\nimport store from './store';\nimport Read from './components/Read.jsx'\nimport Write from './components/Write.jsx'\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <Read />\n      <Write />\n    </Provider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}